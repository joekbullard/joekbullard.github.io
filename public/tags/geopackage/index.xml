<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Geopackage on Joe k Bullard</title>
    <link>http://localhost:1313/tags/geopackage/</link>
    <description>Recent content in Geopackage on Joe k Bullard</description>
    <image>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 20 Mar 2023 19:39:57 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/geopackage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GeoPackage and Python - Part 1</title>
      <link>http://localhost:1313/posts/geopackage-part-1/</link>
      <pubDate>Mon, 20 Mar 2023 19:39:57 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/geopackage-part-1/</guid>
      <description>&lt;p&gt;GeoPackage (GPKG) is a spatial format that many QGIS users will be familiar with, as a format it offers &lt;a href=&#34;http://switchfromshapefile.org/#geopackage&#34;&gt;many advantages&lt;/a&gt; over the ubiquitous shapefile format. In short, the Geopackage Encoding Standard enforces a set of rules and standards for storing vector features (Points, Lines, Polygons) and raster data in an SQLite database. While many people will use GPKG as a like-for-like shapefile replacement, through knowledge of some fairly basic SQL it can offer some of the advanced functionality typically associated with spatial databases such as PostgreSQL/PostGIS. In this post, I will go through some of the requirements of the format specification and how you can create and interact with a geopackage using python&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
