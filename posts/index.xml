<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Joe k Bullard</title>
    <link>https://joekbullard.github.io/posts/</link>
    <description>Recent content in Posts on Joe k Bullard</description>
    <image>
      <url>https://joekbullard.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://joekbullard.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 23 Jul 2023 22:32:05 +0100</lastBuildDate><atom:link href="https://joekbullard.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using docker with Gdal</title>
      <link>https://joekbullard.github.io/posts/docker-gdal/</link>
      <pubDate>Sun, 23 Jul 2023 22:32:05 +0100</pubDate>
      
      <guid>https://joekbullard.github.io/posts/docker-gdal/</guid>
      <description>Note - this assumes you have docker installed and are broadly familiar with using it from the command line.
Anyone who works with GIS will be familiar with the Geospatial Data Abstraction Library, or GDAL as it&amp;rsquo;s more commonly know. It&amp;rsquo;s the swiss army knife of GIS tools - allowing users to read, write and convert between numerous raster and vector formats. For those who aren&amp;rsquo;t familiar there are plenty of resources around that give an introduction, a good place to start is the official GDAL tutorial page.</description>
    </item>
    
    <item>
      <title>An Intro to Geopackage</title>
      <link>https://joekbullard.github.io/posts/an-intro-to-geopackage/</link>
      <pubDate>Thu, 23 Mar 2023 08:32:20 +0000</pubDate>
      
      <guid>https://joekbullard.github.io/posts/an-intro-to-geopackage/</guid>
      <description>Geopackage is a format that will be familiar to many who work with spatial data, particularly those that use QGIS. In the majority of use cases it will be treated as little more than a shapefile replacement - i.e. a means to manage and share vector data. But what if I told you that by using a geopackage you could have access to a whole range of additional features and functionality more typically associated with a relational database management system (RDMS) like PostgreSQL/PostGIS?</description>
    </item>
    
    <item>
      <title>Docker Geoserver Part 1</title>
      <link>https://joekbullard.github.io/posts/docker-geoserver-part-1/</link>
      <pubDate>Mon, 21 Nov 2022 01:22:15 +0000</pubDate>
      
      <guid>https://joekbullard.github.io/posts/docker-geoserver-part-1/</guid>
      <description>This is the first in a small series that will go through the process of compiling an open source spatial stack to store, serve and visualise spatial data. Given we will be working with a number of containers it is beneficial to work with docker-compose.
Note: While it is possible to use Postgres in a docker container, this is not recommended for production purposes. A managed service such as AWS RDS is a better option in these instances.</description>
    </item>
    
    <item>
      <title>Subdivide and Conquer</title>
      <link>https://joekbullard.github.io/posts/subdivide-and-conquer/</link>
      <pubDate>Mon, 21 Nov 2022 01:12:57 +0000</pubDate>
      
      <guid>https://joekbullard.github.io/posts/subdivide-and-conquer/</guid>
      <description>Dealing with large and complex geometries in postgis can be computationally expensive, even with a spatial index. To understand why this is we need to have some understanding of how a spatial index works. In simple terms, a spatial index is a bounding box that encapsulates the extent of a geometry, using a spatial index can rapidly speed up spatial processing by first checking which bounding boxes intersect - a comparatively quick process - as opposed to which raw geometries intersect - potentially a lot slower - and more so as the size of your dataset increases.</description>
    </item>
    
    <item>
      <title>Manipulating NBN species data with Geopandas</title>
      <link>https://joekbullard.github.io/posts/geopandas-nbn/</link>
      <pubDate>Mon, 21 Nov 2022 01:07:07 +0000</pubDate>
      
      <guid>https://joekbullard.github.io/posts/geopandas-nbn/</guid>
      <description>Geopandas has established itself a great python library for working with spatial data, building on the much loved pandas library and adding the ability to perform spatial operations. In this post I&amp;rsquo;ll run through some of the capabilities of the library. I&amp;rsquo;m using some data from the NBN Atlas - a great resource for species records. This particular dataset contains all mammal records recorded in the locality of Bristol, UK. The code can be found on my github.</description>
    </item>
    
  </channel>
</rss>
